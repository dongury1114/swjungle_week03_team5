접근법

1. 노드의 쌍을 입력 받을 때마다, 부모를 알아낼 수 있다면, 즉, 노드 쌍 중의 하나의 부모가 정해진 경우라면, 나머지 노드의 부모를 결정한다.

 

2. 그렇지 않은 경우 큐에 넣어서 남은 쌍의 부모를 찾아나가는데, 큐에 넣는다면 최악의 경우에 큐의 맨 뒤에 있는 쌍만 처리될 수 있다. 그렇다면 O(N^2)의 시간복잡도가 걸리게 되므로, deque 자료구조를 이용해서 순서를 번갈아가면서 처리해 준다. 

 

3. 다른 접근법으로 노드의 쌍을 입력받아 저장한 뒤에 DFS로 부모를 결정할 수도 있는데, O(N)의 시간복잡도로 AC를 받을 수는 있으나, 메모리가 과도하게 많이 필요하다.

우선 2차원 리스트로 연결되어 있는 것들은 다 이어준다.
그리고 DFS를 돌리는데 시작점이 분명하므로, 그 시작점에 연결된 것들은 만약 parents에 부모가 저장되어 있지 않다면 시작점의 자식이다. 그렇게 하고나면 그 시작점들은 다시 부모가 되고, 그런식으로 연결된 것들을 찾아나간다.

주어진 노드들이 부모 - 자식 순서가 아니라 랜덤으로 주어지기 때문에 양방향으로 넣어줘야합니다.

1은 무조건 루트이기 때문에 1부터 넣고 방문했다고 표시한 뒤 전형적인 DFS를 진행해주면 됩니다.
